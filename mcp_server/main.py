# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:38:45+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity

from models import (
    ApiResponseFailure,
    ApiResponseSuccess,
    ChromeHtmlToPdfRequest,
    ChromeUrlToPdfRequest,
    LibreOfficeConvertRequest,
    MergeRequest,
    WkHtmlToPdfHtmlToPdfRequest,
    WkHtmlToPdfUrlToPdfRequest,
)

app = MCPProxy(
    contact={
        'email': 'support@api2pdf.com',
        'name': 'Support',
        'x-twitter': 'api2pdf_status',
    },
    description="\n# Introduction\n[Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing).\n# SDKs & Client Libraries\nWe've made a number of open source libraries available for the API\n- Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python)\n- .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet)\n- Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node)\n- PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php)\n- Ruby: (Coming soon)\n# Authorization\nCreate an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.\n\n**Authorize your API calls**\n- GET requests, include apikey=YOUR-API-KEY as a query string parameter\n- POST requests, add **Authorization** to your header.\n``` Authorization: YOUR-API-KEY ```\n\n# Quickstart\nIf you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like:\n``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```\n\nFor more advanced usage and settings, see the API specification below.\n",
    license={
        'name': 'Creative Commons',
        'url': 'https://creativecommons.org/licenses/by/4.0/legalcode',
    },
    title='Api2Pdf - PDF Generation, Powered by AWS Lambda',
    version='1.0.0',
    servers=[{'description': 'Api2Pdf.com API', 'url': 'https://v2018.api2pdf.com'}],
)


@app.post(
    '/chrome/html',
    description=""" Convert HTML to a PDF using Headless Chrome on AWS Lambda.
### Authorize via Header of Request
**Authorization: YOUR-API-KEY** """,
    tags=['pdf_conversion'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def chrome_from_html_post(body: ChromeHtmlToPdfRequest = None):
    """
    Convert raw HTML to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chrome/url',
    description=""" Convert a URL or Web Page to PDF using Headless Chrome on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.
### Authorize via Query String Parameter
**apikey=YOUR-API-KEY**
### Example
``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```  """,
    tags=['pdf_conversion'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def chrome_from_url_g_e_t(url: str, output: Optional[str] = None):
    """
    Convert URL to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chrome/url',
    description=""" Convert a URL or Web Page to PDF using Headless Chrome on AWS Lambda..
### Authorize via Header of Request
**Authorization: YOUR-API-KEY** """,
    tags=['pdf_conversion'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def chrome_from_url_post(body: ChromeUrlToPdfRequest = None):
    """
    Convert URL to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/libreoffice/convert',
    description=""" Convert an office document (Word, Excel, Powerpoint) or an image (jpg, gif, png) to a PDF using LibreOffice on AWS Lambda.
### Authorize via Header of Request
**Authorization: YOUR-API-KEY** """,
    tags=['pdf_conversion'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def libre_convert_post(body: LibreOfficeConvertRequest = None):
    """
    Convert office document or image to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/merge',
    description=""" Merge two or more PDFs together on AWS Lambda.
### Authorize via Header of Request
**Authorization: YOUR-API-KEY** """,
    tags=['pdf_merging'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def merge_post(body: MergeRequest = None):
    """
    Merge multiple PDFs together
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/wkhtmltopdf/html',
    description=""" Convert HTML to a PDF using WkHtmlToPdf on AWS Lambda.
### Authorize via Header of Request
**Authorization: YOUR-API-KEY** """,
    tags=['pdf_conversion'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def wkhtmltopdf_from_html_post(body: WkHtmlToPdfHtmlToPdfRequest = None):
    """
    Convert raw HTML to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wkhtmltopdf/url',
    description=""" Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.
### Authorize via Query String Parameter
**apikey=YOUR-API-KEY**
### Example
``` https://v2018.api2pdf.com/wkhtmltopdf/url?url={UrlToConvert}&apikey={YourApiKey} ```  """,
    tags=['pdf_conversion'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def wkhtmltopdf_from_url_g_e_t(url: str, output: Optional[str] = None):
    """
    Convert URL to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/wkhtmltopdf/url',
    description=""" Convert a URL or Web Page to PDF using WkHtmlToPdf on AWS Lambda..
### Authorize via Header of Request
**Authorization: YOUR-API-KEY** """,
    tags=['pdf_conversion'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def wkhtmltopdf_from_url_post(body: WkHtmlToPdfUrlToPdfRequest = None):
    """
    Convert URL to PDF
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/zebra',
    description=""" See full list of options and documentation [here](https://www.api2pdf.com/documentation/advanced-options-zxing-zebra-crossing-barcodes/)
### Authorize via Query String Parameter
**apikey=YOUR-API-KEY**
### Example
``` https://v2018.api2pdf.com/zebra?format={format}&apikey={YourApiKey}&value={YourText} ```  """,
    tags=['barcode_creation'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def zebra_g_e_t(
    format: str,
    value: str = ...,
    showlabel: Optional[bool] = None,
    height: Optional[int] = None,
    width: Optional[int] = None,
):
    """
    Generate bar codes and QR codes with ZXING.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
