# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:38:45+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class ApiResponseFailure(BaseModel):
    reason: Optional[str] = Field(
        None,
        description='The reason for the PDF generation failure',
        examples=['Source website could not be found'],
    )
    success: Optional[bool] = Field(
        None, description='Will be false if the operation failed', examples=[False]
    )


class ApiResponseSuccess(BaseModel):
    cost: Optional[float] = Field(
        None,
        description='Cost of the operation (mbIn + mbOut) * $.001',
        examples=[0.0007979],
    )
    mbIn: Optional[float] = Field(
        None,
        description='The amount of megabytes of bandwidth used to process the pdf',
        examples=[0.06463],
    )
    mbOut: Optional[float] = Field(
        None,
        description='The amount of megabytes of bandwidth generated from the resulting pdf',
        examples=[0.73327],
    )
    pdf: Optional[str] = Field(
        None,
        description='A url to the PDF that will exist only for 24 hours',
        examples=['https://link-to-your-pdf'],
    )
    success: Optional[bool] = Field(
        None, description='Will be true if the operation suceeded', examples=[True]
    )


class ChromeAdvancedOptions(BaseModel):
    landscape: Optional[str] = Field(None, examples=['true'])
    printBackground: Optional[bool] = Field(None, examples=[False])


class ChromeHtmlToPdfRequest(BaseModel):
    fileName: Optional[str] = Field(None, examples=['test.pdf'])
    html: str = Field(..., examples=['<p>Hello World</p>'])
    inlinePdf: Optional[bool] = Field(None, examples=[True])
    options: Optional[ChromeAdvancedOptions] = None


class ChromeUrlToPdfRequest(BaseModel):
    fileName: Optional[str] = Field(None, examples=['test.pdf'])
    inlinePdf: Optional[bool] = Field(None, examples=[True])
    options: Optional[ChromeAdvancedOptions] = None
    url: str = Field(..., examples=['https://www.github.com'])


class LibreOfficeConvertRequest(BaseModel):
    fileName: Optional[str] = Field(None, examples=['test.pdf'])
    inlinePdf: Optional[bool] = Field(None, examples=[True])
    url: str = Field(
        ...,
        examples=[
            'https://www.api2pdf.com/wp-content/themes/api2pdf/assets/samples/sample-word-doc.docx'
        ],
    )


class MergeRequest(BaseModel):
    fileName: Optional[str] = Field(None, examples=['test.pdf'])
    inlinePdf: Optional[bool] = Field(None, examples=[True])
    urls: List[str] = Field(
        ..., examples=[['link-to-pdf1', 'link-to-pdf2', 'link-to-pdf3']]
    )


class WkHtmlToPdfAdvancedOptions(BaseModel):
    orientation: Optional[str] = Field(None, examples=['landscape'])
    pageSize: Optional[str] = Field(None, examples=['A4'])


class WkHtmlToPdfHtmlToPdfRequest(BaseModel):
    fileName: Optional[str] = Field(None, examples=['test.pdf'])
    html: str = Field(..., examples=['<p>Hello World</p>'])
    inlinePdf: Optional[bool] = Field(None, examples=[True])
    options: Optional[WkHtmlToPdfAdvancedOptions] = None


class WkHtmlToPdfUrlToPdfRequest(BaseModel):
    fileName: Optional[str] = Field(None, examples=['test.pdf'])
    inlinePdf: Optional[bool] = Field(None, examples=[True])
    options: Optional[WkHtmlToPdfAdvancedOptions] = None
    url: str = Field(..., examples=['https://www.github.com'])
